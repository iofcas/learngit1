$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


New Project:
1 new project with eclipse/android studio/vs2012/codeblocks/makefile/sublimetext
2 git init
3 git add .
4 git commit -m "new project,first commit"
5 onsite github add your repository....  (may you should add your ssh key!)
6 reference the note:
	echo "# Improve" >> README.md
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/iofcas/Improve.git              (为版本库添加名为origin的远程版本库)
	git push -u origin master                                  (把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。)




Distributed Development:
1 git clone https://github.com/iofcas/learngit1.git (git:/ssh:)



Daily Build:
1 mv rm vim modify....that's ok
2 git add -A
3 git status   (git diff) 
4 git commit -m "your build" 
5 git push -u origin master




Branch New Function:
1 git branch dev
2 git checkout dev      1,2<=>git checkout -b dev
3 mv rm vim modify....that's ok
4 git commit -m "branch new function ok"
5 git checkout master

No conflict:
6 git merge dev  (Fast-forward)
7 git branch -d dev

if conflict:(when master is ahead of dev_newfunction_master,no Fast-forward)
1 vim & modify the conlicted file
2 git add .
3 git commit -m "conflict ok"
4 git log --graph --pretty=oneline --abbrev-commit
	$ git log --graph --pretty=oneline
	*   e2b770b473f4b01c95051f67df183b716c588554 process conflict
	|\
	| * 4cfb80d84f31611f53e643a408c62e99e25a1cbc branch add a file
	* | d954435c6637927da5bdf440ed80c41e3fa346d2 add aaa
	|/
	* 2f435ae3a03e6b5225e91fb4d704c1e2eb85d562 modify git learn
	* b60880ac8fcecf1a20a332f12222d5e6f316aef4 modify file.cpp added->add
	* 1ac939b4d2b67777d40ae5a5d3c8cecec51049d0 add branch hello function
	* 07e8db4d764b1440bf4fa3c275e1ec339f24f97b modify learngit & daily build model
	* b6408d0509fef560205a0a64fec27afc61285cdf del a file & new fileB
	* 1c408eafa0db0306a63fe9a44f8edced2e72b898 modify file->file.cpp;new file fileA
	* 6db1625bd6355cb7e53e8035dad50ff2ace6a193 file.c->file and so on
	* c7e0be6095dd168603a8661e308d9db1de660955 add a new file
	* b6ee53e718df3f135c16a94890b305204f7a6ad5 add readme
	* a61163eeef7dcac1a592252cf30fd1451e08fd04 leartgit1 first commit 


--no-ff:
1 git merge --no-ff -m "merge with no-ff" dev
2 (合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。)


BUG:
(当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交)
1 git stash
2 Process BUG Branch
3 git stash list
4 git stash pop (git stash apply + git stash drop)

Del New function with no merge:
(接到上级命令，因经费不足，新功能必须取消)
1 git branch -D dev