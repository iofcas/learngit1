//http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


New Project:
1 new project with eclipse/android studio/vs2012/codeblocks/makefile/sublimetext
2 git init
3 git add .
4 git commit -m "new project,first commit"
5 onsite github add your repository....  (may you should add your ssh key!)
6 reference the note:
	echo "# Improve" >> README.md
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/iofcas/Improve.git              (为版本库添加名为origin的远程版本库)
	git push -u origin master                                  (把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。)




Distributed Development:
1 git clone https://github.com/iofcas/learngit1.git (git:/ssh:)



Daily Build:
1 mv rm vim modify....that's ok
2 git add -A
3 git status   (git diff) 
4 git commit -m "your build" 
5 git push -u origin master




Branch New Function:
1 git branch dev
2 git checkout dev      1,2<=>git checkout -b dev
3 mv rm vim modify....that's ok
4 git commit -m "branch new function ok"
5 git checkout master

No conflict:
6 git merge dev  (Fast-forward)
7 git branch -d dev

if conflict:(when master is ahead of dev_newfunction_master,no Fast-forward)
1 vim & modify the conlicted file
2 git add .
3 git commit -m "conflict ok"
4 git log --graph --pretty=oneline --abbrev-commit
	$ git log --graph --pretty=oneline
	*   e2b770b473f4b01c95051f67df183b716c588554 process conflict
	|\
	| * 4cfb80d84f31611f53e643a408c62e99e25a1cbc branch add a file
	* | d954435c6637927da5bdf440ed80c41e3fa346d2 add aaa
	|/
	* 2f435ae3a03e6b5225e91fb4d704c1e2eb85d562 modify git learn
	* b60880ac8fcecf1a20a332f12222d5e6f316aef4 modify file.cpp added->add
	* 1ac939b4d2b67777d40ae5a5d3c8cecec51049d0 add branch hello function
	* 07e8db4d764b1440bf4fa3c275e1ec339f24f97b modify learngit & daily build model
	* b6408d0509fef560205a0a64fec27afc61285cdf del a file & new fileB
	* 1c408eafa0db0306a63fe9a44f8edced2e72b898 modify file->file.cpp;new file fileA
	* 6db1625bd6355cb7e53e8035dad50ff2ace6a193 file.c->file and so on
	* c7e0be6095dd168603a8661e308d9db1de660955 add a new file
	* b6ee53e718df3f135c16a94890b305204f7a6ad5 add readme
	* a61163eeef7dcac1a592252cf30fd1451e08fd04 leartgit1 first commit 


--no-ff:
1 git merge --no-ff -m "merge with no-ff" dev
2 (合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。)


BUG:
(当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交)
1 git stash
2 Process BUG Branch
3 git stash list
4 git stash pop (git stash apply + git stash drop)

Del New function with no merge:
(接到上级命令，因经费不足，新功能必须取消)
1 git branch -D dev

Dev Branch:
(创建远程new分支并推送本地dev分支到远程)
1 git push origin dev:new


Version Tag:
(Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针)
1 git tag v1.0 (HEAD)
2 git tag v0.9 6224937 (git log --pretty=oneline --abbrev-commit)
3 git tag
4 git show v0.9
5 git tag -a v0.1 -m "version 0.1 released" 3628164
6 git tag -d v0.1
7 git push origin v1.0
8 git push origin --tags (push所有分支)
9 git push origin :refs/tags/v0.9 (删除远程分支)


Open Source Join:
(一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。)
1 fork  
2 git clone https://...my.git
3 vim...
4 pull request

.gitignore:
(https://github.com/github/gitignore)
1 另存为.gitignore即可


alias:
git config --global alias.st status   => git st
git config --global alias.unstage 'reset HEAD' => git unstage test.py  <=> git reset HEAD test.py
git config --global alias.last 'log -1'  => git last
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"   => git lg


config:
$ cat .gitconfig
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status
[user]
    name = Your Name
    email = your@email.com


Reset File:
Not staged for commit (not add .):
(git checkout -- 丢弃工作区的修改)
(git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”)
1 git checkout -- readme.txt

Changes to be committed(has added .):
(git reset既可以回退版本，也可以把暂存区回退到工作区的修改)
1 git reset HEAD readme.txt


Fetch&Pull:
( ! [rejected]        master -> master (fetch first))
1 git fetch origin master  (master:master 中第一个master是origin/master)
	git fetch origin master
	git log -p master..origin/master
	git merge origin/master

2 git fetch origin master:tmp
	git fetch origin master:tmp
	git diff tmp 
	git merge tmp

3 git pull:
	(相当于git fetch 和 git merge)
	git pull origin master

4 决策：
git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并

5 git fetch origin branch1:branch2
  (使用远程branch1分支在本地创建branch2,但不会切换到该分支)
	如果本地不存在branch2分支, 则会自动创建一个新的branch2分支, 
	如果本地存在branch2分支, 并且是`fast forward', 则自动合并两个分支, 否则, 会阻止以上操作.

6 git fetch origin master:tmp , git push origin master:dev 

	git fetch origin server:local  从server fetch 到local
	git push origin local:server   从local  push 到server


Diff:
git diff origin/master (当前版本跟origin/master比较)
git diff dev (当前版本跟dev版本比较)